{
	"author": "HardCoded",
	"version": "invalid",
	"comment": "This json file was made by the ghidra module ScrapMechanicTracer. https://github.com/Kariaro/ScrapMechanicTracer",
	"time": 1622368586765,
	"urls": {
		"github": "https://www.twitch.tv/hard_coded",
		"twitch": "https://github.com/Kariaro",
		"twitter": "https://twitter.com/HardCodedTwitch"
	},
	"content": {
		"sm": {
			"constants": {},
			"tabledata": {},
			"userdata": {}
		},
		"sm.physics": {
			"constants": {},
			"tabledata": {
				"raycast": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "start",
							"description": "The start position."
						},
						{
							"type": [
								"vec3"
							],
							"name": "end",
							"description": "The end position."
						},
						{
							"type": [
								"shape",
								"character",
								"harvestable",
								"body"
							],
							"name": "body",
							"description": "The body to be ignored. (Optional)"
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"table {bool, raycastResult}"
							],
							"description": "2 values: whether raycast was successful; the raycast result data."
						}
					],
					"description": "Performs a [ray cast](https://en.wikipedia.org/wiki/Ray_casting) between two positions.\n\nThe returned [`raycastResult`](#userdata.raycastresult \"userdata.raycastresult\") contains information about any object intersected by the ray.\n\nIf the ray cast is called from within a shape (e.g. a Sensor), a [`body`](#userdata.body \"userdata.body\") may be provided which the ray will not intersect."
				},
				"distanceRaycast": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "start",
							"description": "The start position."
						},
						{
							"type": [
								"vec3"
							],
							"name": "direction",
							"description": "The ray's direction and length."
						}
					],
					"returns": [
						{
							"type": [
								"table {bool, number}"
							],
							"description": "2 values: whether raycast was successful; the fraction (0\u20131) of the distance reached until collision divided by the ray's length."
						}
					],
					"description": "Performs a distance [ray cast](https://en.wikipedia.org/wiki/Ray_casting) from a position with a given direction.\n\nNote\n\n[`sm.physics.distanceRaycast`](#sm.physics.distanceraycast \"sm.physics.distanceraycast\") is generally cheaper to use than [`sm.physics.raycast`](#sm.physics.raycast \"sm.physics.raycast\") as it performs collision checks in a simplified world. If the raycast is only used for checking collision, it is adviced to use this method instead."
				},
				"applyImpulse": {
					"args": 4,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"userdata",
								"body",
								"character",
								"shape"
							],
							"name": "target",
							"description": "The character on which the impulse is exerted on."
						},
						{
							"type": [
								"vec3"
							],
							"name": "impulse",
							"description": "The direction and strength of the impulse."
						},
						{
							"type": [
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": [],
					"description": "Applies an impulse to a [`character`](#userdata.character \"userdata.character\"), changing its velocity immediately. The impulse is applied to the character's centerpoint."
				},
				"applyTorque": {
					"args": 3,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"userdata",
								"body"
							],
							"name": "target",
							"description": "The object on which the torque is exerted on."
						},
						{
							"type": [
								"vec3"
							],
							"name": "torque",
							"description": "The direction and strength of the torque."
						},
						{
							"type": [
								"number"
							],
							"name": "global",
							"description": "Whether the torque is applied in global coordinates. (Defaults to local rotation)"
						}
					],
					"returns": [],
					"description": "Applies a torque impulse to a [`body`](#userdata.body \"userdata.body\"), changing its angular velocity immediately. The torque is applied along the body's center of mass, making it rotate."
				},
				"explode": {
					"args": 8,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The center point of the explosion."
						},
						{
							"type": [
								"int"
							],
							"name": "level",
							"description": "The destruction level affecting nearby objects."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "destructionRadius",
							"description": "The destruction radius. Objects inside this sphere may be destroyed."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "impulseRadius",
							"description": "The impulse radius. Objects inside this sphere are affected by an impulse."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "magnitude",
							"description": "The impulse strength of the explosion. The strength diminishes with distance."
						},
						{
							"type": [
								"string"
							],
							"name": "effectName",
							"description": "The name of the effect to be played upon explosion. (Optional)"
						},
						{
							"type": [
								"shape"
							],
							"name": "ignoreShape",
							"description": "The shape to be ignored. (Optional)"
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": [],
					"description": "Creates an explosion at given position. The explosion creates a shockwave that is capable of destroying blocks and pushing characters and creations away.\n\nShapes that are within the explosion's destruction radius may receive the event [`server_onExplosion`](#shapeclass.server_onexplosion \"shapeclass.server_onexplosion\").\n\nNote\n\nThe **destruction level** is the damage effect on blocks and parts, determining how likely it is that they are destroyed. This is related to the `qualityLevel` found in parts json-files.\n\nAny quality level equal to or less than the destruction level may be destroyed. The effect fades one level every half travelled of the remaining destruction radius.\n\nA quality level of 0 means a block or part is indestructible."
				},
				"setGravity": {
					"args": 1,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "gravity",
							"description": "The gravitational value."
						}
					],
					"returns": [],
					"description": "Sets the gravitational acceleration affecting [`shapes`](#userdata.shape \"userdata.shape\") and [`bodies`](#userdata.body \"userdata.body\")."
				},
				"getGravity": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The gravitational value."
						}
					],
					"description": "Returns the gravitational acceleration affecting [`shapes`](#userdata.shape \"userdata.shape\") and [`bodies`](#userdata.body \"userdata.body\")."
				},
				"getGroundMaterial": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"sphereContactCount": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSphereContacts": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.terrainData": {
			"constants": {},
			"tabledata": {
				"save": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"load": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"exists": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"legacy_saveTerrainData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"legacy_loadTerrainData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"legacy_setData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"legacy_getData": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.json": {
			"constants": {},
			"tabledata": {
				"open": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"save": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"parseJsonString": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"writeJsonString": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.noise": {
			"constants": {},
			"tabledata": {
				"simplexNoise1d": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The X value."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The noise value."
						}
					],
					"description": "A simplex noise 1d function."
				},
				"simplexNoise2d": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The X value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "y",
							"description": "The Y value."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The noise value."
						}
					],
					"description": "A simplex noise 2d function."
				},
				"intNoise2d": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": "x",
							"description": "The X value."
						},
						{
							"type": [
								"number"
							],
							"name": "y",
							"description": "The Y value."
						},
						{
							"type": [
								"int"
							],
							"name": "octaves",
							"description": "The octaves."
						},
						{
							"type": [
								"int"
							],
							"name": "seed",
							"description": "The seed."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The noise value."
						}
					],
					"description": "An integer noise 2d function."
				},
				"floatNoise2d": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The X value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "y",
							"description": "The Y value."
						},
						{
							"type": [
								"int"
							],
							"name": "seed",
							"description": "The seed."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The noise value."
						}
					],
					"description": "A float noise 2d function."
				},
				"perlinNoise2d": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"octaveNoise2d": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The X value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "y",
							"description": "The Y value."
						},
						{
							"type": [
								"int"
							],
							"name": "octaves",
							"description": "The octaves."
						},
						{
							"type": [
								"int"
							],
							"name": "seed",
							"description": "The seed."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The noise value."
						}
					],
					"description": "An octave noise 2d function."
				},
				"randomRange": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "a",
							"description": "The lower bound."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "b",
							"description": "The upper bound."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The random value."
						}
					],
					"description": "Returns a random number N such that `a <= N <= b`."
				},
				"randomNormalDistribution": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "mean",
							"description": "The mean."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "deviation",
							"description": "The deviation."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The random number."
						}
					],
					"description": "Returns a random number according to the [normal random number distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n\nValues near the **mean** are the most likely.\n\nStandard **deviation** affects the dispersion of generated values from the mean."
				},
				"gunSpread": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "direction",
							"description": "The direction."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "spreadAngle",
							"description": "The spread angle in degrees."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The spread direction."
						}
					],
					"description": "Returns a directional vector with a random spread given by a [`normal distribution`](#sm.noise.randomnormaldistribution \"sm.noise.randomnormaldistribution\")."
				}
			},
			"userdata": {}
		},
		"sm.util": {
			"constants": {},
			"tabledata": {
				"clamp": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "lower",
							"description": "The lower limit."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "upper",
							"description": "The upper limit."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The clamped value."
						}
					],
					"description": "Restricts a value to a given range."
				},
				"lerp": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "x0",
							"description": "The first value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "x1",
							"description": "The second value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "t",
							"description": "The interpolation step."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The interpolated value between two values."
						}
					],
					"description": "Linear interpolation between two values. This is known as a lerp."
				},
				"bezier2": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "c0",
							"description": "The start value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "c1",
							"description": "The control point."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "c2",
							"description": "The end value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "t",
							"description": "The interpolation step."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The interpolated value between two values."
						}
					],
					"description": "Quadratic Bezier interpolation. One dimensional bezier curve."
				},
				"bezier3": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "c0",
							"description": "The start value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "c1",
							"description": "The first control point."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "c2",
							"description": "The second control point."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "c3",
							"description": "The end value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "t",
							"description": "The interpolation step."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The interpolated value between two values."
						}
					],
					"description": "Cubic Bezier interpolation. One dimensional bezier curve."
				},
				"positiveModulo": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": "x",
							"description": "The number."
						},
						{
							"type": [
								"number"
							],
							"name": "n",
							"description": "The modulo value."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The value."
						}
					],
					"description": "Returns the positive remainder after division of x by n."
				},
				"smoothstep": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "edge0",
							"description": "The value of the lower edge of the Hermite function."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "edge1",
							"description": "The value of the upper edge of the Hermite function."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The source value for interpolation."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The value."
						}
					],
					"description": "Performs smooth Hermite interpolation between 0 and 1 when `edge0 < x < edge1`. This is useful in cases where a threshold function with a smooth transition is desired."
				},
				"smootherstep": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "edge0",
							"description": "The value of the lower edge of the Hermite function."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "edge1",
							"description": "The value of the upper edge of the Hermite function."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The source value for interpolation."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The value."
						}
					],
					"description": "An improved version of the [`smoothstep`](#sm.util.smoothstep \"sm.util.smoothstep\") function which has zero 1st and 2nd order derivatives at `x = edge0` and `x = edge1`."
				}
			},
			"userdata": {}
		},
		"sm.projectile": {
			"constants": {},
			"tabledata": {
				"getProjectileMass": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The projectile's name."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The mass."
						}
					],
					"description": "Returns the mass of a projectile."
				},
				"playerFire": {
					"args": 6,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The projectile's name."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The start position."
						},
						{
							"type": [
								"vec3"
							],
							"name": "velocity",
							"description": "The direction and velocity."
						},
						{
							"type": [
								"vec3"
							],
							"name": "fakePosThird",
							"description": "The visual start position in third-person. (Defaults to position)"
						},
						{
							"type": [
								"vec3"
							],
							"name": "fakePosFirst",
							"description": "The visual start position in first-person. (Defaults to position)"
						},
						{
							"type": [
								"int"
							],
							"name": "delay",
							"description": "The number of ticks before firing. (Defaults to 0)"
						}
					],
					"returns": [],
					"description": "Creates and fires a projectile from a player.\n\nThe projectile is normally fired from the player's position, but due to the weapon being held off-center it may require a fake position for where the projectile appears to be fired from."
				},
				"shapeFire": {
					"args": 5,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						},
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The projectile's name."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The start position."
						},
						{
							"type": [
								"vec3"
							],
							"name": "velocity",
							"description": "The direction and velocity."
						},
						{
							"type": [
								"int"
							],
							"name": "delay",
							"description": "The number of ticks before firing. (Defaults to 0)"
						}
					],
					"returns": [],
					"description": "Creates and fires a projectile from a [`shape`](#userdata.shape \"userdata.shape\")."
				},
				"solveBallisticArc": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"projectileAttack": {
					"args": 8,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"customProjectileAttack": {
					"args": 9,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"shapeProjectileAttack": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"shapeCustomProjectileAttack": {
					"args": 7,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"harvestableProjectileAttack": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"harvestableCustomProjectileAttack": {
					"args": 7,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.melee": {
			"constants": {},
			"tabledata": {
				"meleeAttack": {
					"args": 7,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.game": {
			"constants": {},
			"tabledata": {
				"getServerTick": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getCurrentTick": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The tick."
						}
					],
					"description": "Return the current game tick"
				},
				"setLimitedInventory": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getLimitedInventory": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setEnableRestrictions": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getEnableRestrictions": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setEnableAmmoConsumption": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getEnableAmmoConsumption": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setEnableFuelConsumption": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getEnableFuelConsumption": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setEnableUpgradeCost": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getEnableUpgradeCost": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setEnableAggro": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getEnableAggro": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"bindChatCommand": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setTimeOfDay": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTimeOfDay": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getDifficulty": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.creation": {
			"constants": {},
			"tabledata": {
				"exportToString": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"importFromString": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"world"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"importFromFile": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"world"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.cell": {
			"constants": {},
			"tabledata": {
				"getNodesByTag": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getNodesByTags": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getInteractablesByTag": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getInteractablesByTags": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getInteractablesByUuid": {
					"args": 3,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"int"
							],
							"name": "x",
							"description": "The X-coordinate"
						},
						{
							"type": [
								"int"
							],
							"name": "y",
							"description": "The Y-coordinate"
						},
						{
							"type": [
								"uuid"
							],
							"name": "uuid",
							"description": "The uuid of the interactable(s)"
						}
					],
					"returns": [
						{
							"type": [
								"table {interactable}"
							],
							"description": "A table of found interactables with matching uuid"
						}
					],
					"description": "Returns all [`interactables`](#sm.interactable \"sm.interactable\") of a given type for a cell coordinate."
				},
				"getInteractablesByAnyUuid": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getHarvestables": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTags": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.network": {
			"constants": {},
			"tabledata": {},
			"userdata": {
				"sendToServer": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"network"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"sendToClient": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"network"
							],
							"name": ""
						},
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"sendToClients": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"network"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setClientData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"network"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.storage": {
			"constants": {},
			"tabledata": {
				"save": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": "channel",
							"description": "The channel number."
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": "data",
							"description": "The data to be stored."
						}
					],
					"returns": [],
					"description": "Saves any Lua data at a given channel. A _channel_ can be any integer, and acts as the location the data will be stored at.\n\nThe data will remain stored after closing the world, and is retrieved using [`load`](#sm.storage.load \"sm.storage.load\"), provided the same channel number.\n\nNote\n\nThe data is stored globally **within the current mod**. As of such, channels will not collide with external mods and scripts."
				},
				"load": {
					"args": 1,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": "channel",
							"description": "The channel number."
						}
					],
					"returns": [
						{
							"type": [],
							"description": "The data stored."
						}
					],
					"description": "Loads Lua data stored at a given channel. A _channel_ can be any integer, and acts as the location the data is stored at.\n\nIf no data is stored at the given channel, this returns nil."
				}
			},
			"userdata": {
				"save": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"storage"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"load": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"storage"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.event": {
			"constants": {},
			"tabledata": {
				"sendToGame": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"string"
							],
							"name": "callbackMethod",
							"description": "The function name in the game script."
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": "args",
							"description": "Optional arguments to be sent to the game script."
						}
					],
					"returns": [],
					"description": "Sends a event from a world script to the game script."
				},
				"sendToWorld": {
					"args": 3,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"world"
							],
							"name": "world",
							"description": "The world."
						},
						{
							"type": [
								"string"
							],
							"name": "callbackMethod",
							"description": "The function name in a world script."
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": "args",
							"description": "Optional arguments to be sent to the world script."
						}
					],
					"returns": [],
					"description": "Sends a event from the game script to a specified world script."
				},
				"sendToUnit": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"sendToPlayer": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"sendToCharacter": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"sendToHarvestable": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"sendToInteractable": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.log": {
			"constants": {},
			"tabledata": {
				"info": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"warning": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"error": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.debugDraw": {
			"constants": {},
			"tabledata": {
				"addArrow": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"removeArrow": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addSphere": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"removeSphere": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"clear": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.ai": {
			"constants": {},
			"tabledata": {
				"getClosestVisiblePlayerCharacter": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getClosestVisibleCharacterType": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getClosestVisibleTeamOpponent": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getClosestVisibleCrop": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"isReachable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRandomCreationPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"directPathAvailable": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getBreachablePosition": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAimPosition": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.item": {
			"constants": {},
			"tabledata": {
				"myFunction": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeOffset": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getQualityLevel": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPlantable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getEdible": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCharacterShape": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isTool": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isBlock": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isPart": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isJoint": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPlantableUuids": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getInteractablesUuidsOfType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeSize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeDefaultColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.challenge": {
			"constants": {},
			"tabledata": {
				"start": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [],
					"returns": [],
					"description": "Starts challenge."
				},
				"stop": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [],
					"returns": [],
					"description": "Stops challenge."
				},
				"hasStarted": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the challenge has started."
						}
					],
					"description": "Check if a challenge has started"
				},
				"levelCompleted": {
					"args": 3,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"int"
							],
							"name": "level",
							"description": "The level's index."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "time",
							"description": "The completion time."
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": [],
					"description": "Completes a challenge level and saves progression."
				},
				"getCompletionTime": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSaveData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"resolveContentPath": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"takePicture": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"takePicturesForMenu": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.construction": {
			"constants": {},
			"tabledata": {
				"buildBlock": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"lift",
								"joint",
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"validateLocalPosition": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"joint",
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.menuCreation": {
			"constants": {},
			"tabledata": {
				"load": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"save": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.shape": {
			"constants": {},
			"tabledata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The shape's id."
						}
					],
					"description": "Returns the id of a shape."
				},
				"getShapeUuid": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"uuid"
							],
							"description": "The shape's uuid."
						}
					],
					"description": "Returns the uuid string unique to a shape/block type."
				},
				"getColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"color"
							],
							"description": "The shape's color."
						}
					],
					"description": "Returns the color of a shape."
				},
				"setColor": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "shape",
							"description": "The shape."
						},
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color."
						}
					],
					"returns": [],
					"description": "Sets the color of a shape. This is similar to coloring with the _Paint Tool_."
				},
				"getMass": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The shape's mass."
						}
					],
					"description": "Returns the mass of a shape."
				},
				"getBuoyancy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterial": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"string"
							],
							"description": "The shape's material."
						}
					],
					"description": "Returns the material of a shape."
				},
				"getWorldPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's world position."
						}
					],
					"description": "Returns the world position of a shape."
				},
				"getLocalPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's local position."
						}
					],
					"description": "Returns the local grid postition of a shape."
				},
				"getVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's linear velocity."
						}
					],
					"description": "Returns the linear velocity of a shape."
				},
				"getXAxis": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's x-axis."
						}
					],
					"description": "Returns the local x-axis vector of a shape."
				},
				"getYAxis": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's y-axis."
						}
					],
					"description": "Returns the local y-axis vector of a shape."
				},
				"getZAxis": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's z-axis."
						}
					],
					"description": "Returns the local z-axis vector of a shape."
				},
				"getAt": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's at-axis."
						}
					],
					"description": "Returns the direction of a shape's front side.\n\nThe direction is affected by the shape's rotation in the world."
				},
				"getRight": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's right-axis."
						}
					],
					"description": "Returns the direction of a shape's right side.\n\nThe direction is affected by the shape's rotation in the world."
				},
				"getUp": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The shape's up-axis."
						}
					],
					"description": "Returns the direction of a shape's top side.\n\nThe direction is affected by the shape's rotation in the world."
				},
				"transformPoint": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						},
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The untransformed vector."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The transformed vector."
						}
					],
					"description": "Transform a [`vec3`](#userdata.vec3 \"userdata.vec3\") with the local shape transform.\n\nlocal localPos \\= self.shape:transformPoint( worldPos )"
				},
				"transformLocalPoint": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"transformRotation": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						},
						{
							"type": [
								"quat"
							],
							"name": "quat",
							"description": "The untransformed quaternion."
						}
					],
					"returns": [
						{
							"type": [
								"quat"
							],
							"description": "The transformed quaternion."
						}
					],
					"description": "Transform a [`quat`](#userdata.quat \"userdata.quat\") with the local shape transform.\n\nlocal worldUp \\= sm.vec3.new( 0, 0, 1 )\nlocal worldRot \\= sm.vec3.getRotation( worldUp, worldDir )\nlocal localRot \\= self.shape:transformRotation( worldRot )"
				},
				"getBoundingBox": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The size of the shape's bounding box."
						}
					],
					"description": "Returns the bounding box of a shape \u2013 the dimensions that a shape occupies when building."
				},
				"getBody": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"body"
							],
							"description": "The body which the shape is part of."
						}
					],
					"description": "Returns the [`body`](#userdata.body \"userdata.body\") a shape is part of."
				},
				"getInteractable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"interactable"
							],
							"description": "The interactable belonging to the shape."
						}
					],
					"description": "Returns the [`interactable`](#userdata.interactable \"userdata.interactable\") of a shape, if one exists. Otherwise the function will return nil."
				},
				"destroyPart": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "cs",
							"description": "The part."
						},
						{
							"type": [
								"int"
							],
							"name": "attackLevel",
							"description": "Determines which quality level of parts the attack can destroy. Setting it to 0 (default) will destroy any part."
						}
					],
					"returns": [],
					"description": "Destroy a part"
				},
				"getWorldRotation": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						}
					],
					"returns": [
						{
							"type": [
								"quat"
							],
							"description": "The shape's world rotation."
						}
					],
					"description": "Returns the world rotation of a shape."
				},
				"createPart": {
					"args": 5,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": "uuid",
							"description": "The uuid of the shape."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The shape's world position."
						},
						{
							"type": [
								"quat"
							],
							"name": "rotation",
							"description": "The shape's world rotation."
						},
						{
							"type": [
								"bool"
							],
							"name": "dynamic",
							"description": "Set true if the shape is dynamic or false if the shape is static."
						},
						{
							"type": [
								"bool"
							],
							"name": "forceSpawn",
							"description": "Set true to force spawn the shape even if it will cause collision."
						}
					],
					"returns": [],
					"description": "Create a new part"
				},
				"createBlock": {
					"args": 6,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": "uuid",
							"description": "The uuid of the shape."
						},
						{
							"type": [
								"vec3"
							],
							"name": "size",
							"description": "The size of the block."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The shape's world position."
						},
						{
							"type": [
								"quat"
							],
							"name": "rotation",
							"description": "The shape's world rotation."
						},
						{
							"type": [
								"bool"
							],
							"name": "dynamic",
							"description": "Set true if the shape is dynamic or false if the shape is static."
						},
						{
							"type": [
								"bool"
							],
							"name": "forceSpawn",
							"description": "Set true to force spawn the shape even if it will cause collision."
						}
					],
					"returns": [],
					"description": "Create a new block"
				},
				"createJoint": {
					"args": 4,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The host shape."
						},
						{
							"type": [
								"uuid"
							],
							"name": "uuid",
							"description": "The uuid of the joint."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The joint's grid position."
						},
						{
							"type": [
								"vec3"
							],
							"name": "direction",
							"description": "The joint's normal direction."
						}
					],
					"returns": [],
					"description": "Create a new joint"
				},
				"uuidExists": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterialId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getIsHarvest": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getIsStackable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeTypeColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroyShape": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": "shape",
							"description": "The shape."
						},
						{
							"type": [
								"int"
							],
							"name": "attackLevel",
							"description": "Determines which quality level of shape the attack can destroy. Setting it to 0 (default) will destroy any shape."
						}
					],
					"returns": [],
					"description": "Destroy a shape"
				},
				"getShapeTitle": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeDescription": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeIcon": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"shapeExists": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"shapesInSphere": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getNeighbours": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPipedNeighbours": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeUuid": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setColor": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMass": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getBuoyancy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterial": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getLocalPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getXAxis": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getYAxis": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getZAxis": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAt": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRight": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getUp": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"transformPoint": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"transformLocalPoint": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"transformRotation": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getBoundingBox": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getBody": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getInteractable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroyPart": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldRotation": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createJoint": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterialId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getIsHarvest": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getIsStackable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroyShape": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroyBlock": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getClosestBlockLocalPosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"shapeExists": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"shapesInSphere": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getNeighbours": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPipedNeighbours": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"replaceShape": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.body": {
			"constants": {},
			"tabledata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The body's id."
						}
					],
					"description": "Returns the id of a body."
				},
				"getCreationId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMass": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The body's mass."
						}
					],
					"description": "Returns the mass of a body."
				},
				"getWorldPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The body's world position."
						}
					],
					"description": "Returns the world position of a body."
				},
				"getVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The body's linear velocity."
						}
					],
					"description": "Returns the linear velocity of a body."
				},
				"getAngularVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The body's angular velocity."
						}
					],
					"description": "Returns the angular velocity of a body."
				},
				"getShapes": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"table {shape}"
							],
							"description": "The table of shapes in a body."
						}
					],
					"description": "Returns a table of all [`shapes`](#userdata.shape \"userdata.shape\") that are part of a body.\n\nThis will **not** return shapes in neighbouring bodies connected by [`joints`](#userdata.joint \"userdata.joint\"), etc."
				},
				"getCreationShapes": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"table {shape}"
							],
							"description": "The table of shapes in a creation."
						}
					],
					"description": "Returns a table of all [`shapes`](#userdata.shape \"userdata.shape\") that are part of a creation.\n\nA creation includes all bodies connected by [`joints`](#userdata.joint \"userdata.joint\"), etc."
				},
				"getCreationBodies": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"table {body}"
							],
							"description": "The table all bodies in a creation."
						}
					],
					"description": "Returns a table of all bodies in a creation.\n\nA creation includes all bodies connected by [`joints`](#userdata.joint \"userdata.joint\"), etc."
				},
				"getCreationsFromBodies": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"table { {body}, ... }"
							],
							"description": "The table array containing tables of all the bodies, grouped by creation."
						}
					],
					"description": "Returns a table of tables, which is an array of tables containing bodies grouped by creation.\n\nA creation includes all bodies connected by [`joints`](#userdata.joint \"userdata.joint\"), etc."
				},
				"hasChanged": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						},
						{
							"type": [
								"unsigned"
							],
							"name": "tick",
							"description": "The tick."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Returns true if the body has been changed."
						}
					],
					"description": "Returns true if the given tick is lower than the tick the body was last changed."
				},
				"getAllBodies": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"table {body}"
							],
							"description": "The table of all bodies."
						}
					],
					"description": "Returns a table with all the bodies in the world."
				},
				"createBody": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3",
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"quat",
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3",
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldRotation": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCenterOfMassPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isDynamic": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is dynamic."
						}
					],
					"description": "Check if a body is dyanmic"
				},
				"isStatic": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is static."
						}
					],
					"description": "Check if a body is static"
				},
				"isOnLift": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isDestructable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is destructable."
						}
					],
					"description": "Check if a body is destructable."
				},
				"setDestructable": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						},
						{
							"type": [
								"bool"
							],
							"name": "value",
							"description": "Whether the body is destructable."
						}
					],
					"returns": [],
					"description": "Controls whether a body is destructable"
				},
				"isBuildable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is buildable."
						}
					],
					"description": "Check if a body is buildable"
				},
				"setBuildable": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						},
						{
							"type": [
								"bool"
							],
							"name": "value",
							"description": "Whether the body is buildable."
						}
					],
					"returns": [],
					"description": "Controls whether a body is buildable"
				},
				"isPaintable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is paintable."
						}
					],
					"description": "Check if a body is paintable"
				},
				"setPaintable": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						},
						{
							"type": [
								"bool"
							],
							"name": "value",
							"description": "Whether the body is paintable."
						}
					],
					"returns": [],
					"description": "Controls whether a body is non paintable"
				},
				"isConnectable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is connectable."
						}
					],
					"description": "Check if a body is connectable"
				},
				"setConnectable": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						},
						{
							"type": [
								"bool"
							],
							"name": "value",
							"description": "Whether the body is connectable."
						}
					],
					"returns": [],
					"description": "Controls whether a body is connectable"
				},
				"isLiftable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is liftable."
						}
					],
					"description": "Check if a body is liftable"
				},
				"setLiftable": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						},
						{
							"type": [
								"bool"
							],
							"name": "value",
							"description": "Whether the body is liftable."
						}
					],
					"returns": [],
					"description": "Controls whether a body is liftable"
				},
				"isUsable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is interactable."
						}
					],
					"description": "Check if a body is interactable"
				},
				"setUsable": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						},
						{
							"type": [
								"bool"
							],
							"name": "value",
							"description": "Whether the body is interactable."
						}
					],
					"returns": [],
					"description": "Controls whether a body is liftable"
				},
				"isErasable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Return true if the body is erasable."
						}
					],
					"description": "Check if a body is erasable."
				},
				"setErasable": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"body"
							],
							"name": "body",
							"description": "The body."
						},
						{
							"type": [
								"bool"
							],
							"name": "value",
							"description": "Whether the body is erasable."
						}
					],
					"returns": [],
					"description": "Controls whether a body is erasable"
				},
				"isConvertibleToDynamic": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setConvertibleToDynamic": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCreationId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMass": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAngularVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapes": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCreationShapes": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCreationBodies": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createPart": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createBlock": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"uuid",
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasChanged": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isDynamic": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isStatic": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isOnLift": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isDestructable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setDestructable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isBuildable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setBuildable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isPaintable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPaintable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isConnectable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setConnectable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isLiftable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setLiftable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isUsable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setUsable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isErasable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setErasable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isConvertibleToDynamic": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setConvertibleToDynamic": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAllSeatedCharacter": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCenterOfMassPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorld": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getLocalAabb": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldAabb": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"transformPoint": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"body"
							],
							"name": ""
						},
						{
							"type": [
								"body"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.interactable": {
			"constants": {},
			"tabledata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The interactable's id."
						}
					],
					"description": "Returns the id of an interactable."
				},
				"getType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"string"
							],
							"description": "The interactable's type. (sm.interactable.types)"
						}
					],
					"description": "Returns the interactable type of an interactable."
				},
				"getColorNormal": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"color"
							],
							"description": "The connection-point color."
						}
					],
					"description": "Returns the connection-point color of an interactable. The point is shown when using the _Connect Tool_."
				},
				"getColorHighlight": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"color"
							],
							"description": "The connection-point highlight color."
						}
					],
					"description": "Returns the connection-point highlight color of an interactable. The point is shown when using the _Connect Tool_."
				},
				"getMaxParentCount": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The max parent connection count."
						}
					],
					"description": "Returns the maximum number of allowed parent connections of an interactable \u2013 the number of incoming connections."
				},
				"getMaxChildCount": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The max child connection count."
						}
					],
					"description": "Returns the maximum number of allowed child connections of an interactable \u2013 the number of outgoing connections."
				},
				"isActive": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "The logic output signal."
						}
					],
					"description": "Returns the logic output signal of an interactable. Signal is a boolean, **on** or **off**."
				},
				"setActive": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"bool"
							],
							"name": "signal",
							"description": "The logic output signal."
						}
					],
					"returns": [],
					"description": "Sets the logic output signal of an interactable. Signal is a boolean, **on** or **off**."
				},
				"getPower": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The power output signal."
						}
					],
					"description": "Returns the power output signal of an interactable. Signal is a number between -1 to 1, where 1 is forward and -1 backward."
				},
				"setPower": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "signal",
							"description": "The power output signal."
						}
					],
					"returns": [],
					"description": "Sets the power output signal of an interactable. Signal is a number between -1 to 1, where 1 is forward and -1 backward."
				},
				"getPublicData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPublicData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShape": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"shape"
							],
							"description": "The shape which hosts the interactable."
						}
					],
					"description": "Returns the [`shape`](#userdata.shape \"userdata.shape\") of an interactable."
				},
				"getConnectionInputType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getConnectionOutputType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getBody": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"body"
							],
							"description": "The body an interactable's shape is part of."
						}
					],
					"description": "Returns the [`body`](#userdata.body \"userdata.body\") an interactable's [`shape`](#userdata.shape \"userdata.shape\") is part of."
				},
				"getSingleParent": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"interactable"
							],
							"description": "The connected parent interactable."
						}
					],
					"description": "Returns the parent [`interactable`](#userdata.interactable \"userdata.interactable\") that is connected to an interactable. The parent act as the interactable's input.\n\nWarning\n\nThis method is **not** allowed for an interactable that allows more than one parent connection. See [`sm.interactable.getMaxParentCount`](#sm.interactable.getmaxparentcount \"sm.interactable.getmaxparentcount\")."
				},
				"getParents": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"table {interactable}"
							],
							"description": "A table of the connected parent interactables."
						}
					],
					"description": "Returns a table of parent [`interactables`](#userdata.interactable \"userdata.interactable\") that are connected to an interactable. The parents act as the interactable's input."
				},
				"getChildren": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"table {interactable}"
							],
							"description": "A table of the connected child interactables."
						}
					],
					"description": "Returns a table of child [`interactables`](#userdata.interactable \"userdata.interactable\") that an interactable is connected to. The children listen to the interactable's output."
				},
				"getJoints": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"table {joint}"
							],
							"description": "A table of the connected joints."
						}
					],
					"description": "Returns a table of all [`joints`](#userdata.joint \"userdata.joint\") that an interactable is connected to. Joints include **bearings** and **pistons**."
				},
				"getBearings": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"table {joint}"
							],
							"description": "A table of the connected bearings."
						}
					],
					"description": "Returns a table of [`bearings`](#userdata.joint \"userdata.joint\") that an interactable is connected to."
				},
				"getPistons": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"table {joint}"
							],
							"description": "A table of the connected pistons."
						}
					],
					"description": "Returns a table of [`pistons`](#userdata.joint \"userdata.joint\") that an interactable is connected to."
				},
				"getPoseWeight": {
					"args": 2,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"int"
							],
							"name": "index",
							"description": "The index."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The pose weight."
						}
					],
					"description": "Returns the pose weight of the pose in the given index."
				},
				"setPoseWeight": {
					"args": 3,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"int"
							],
							"name": "index",
							"description": "The index."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "value",
							"description": "The pose weight."
						}
					],
					"returns": [],
					"description": "Set the pose weight of the pose in the given index."
				},
				"getGlowMultiplier": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setGlowMultiplier": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getUvFrameIndex": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The uv frame."
						}
					],
					"description": "Returns the index of the current UV animation frame"
				},
				"setUvFrameIndex": {
					"args": 2,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"int"
							],
							"name": "index",
							"description": "The index."
						}
					],
					"returns": [],
					"description": "Sets the UV animation frame with the given index."
				},
				"hasAnim": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setAnimProgress": {
					"args": 3,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The name of the animation."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "progress",
							"description": "The animation's progress between 0 and 1."
						}
					],
					"returns": [],
					"description": "Sets the progress on the animation with the given name."
				},
				"setAnimEnabled": {
					"args": 3,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The name of the animation."
						},
						{
							"type": [
								"bool"
							],
							"name": "enabled",
							"description": "The boolean enable state."
						}
					],
					"returns": [],
					"description": "Sets whether the animation with the given name should be applied to the mesh. True enables the animation and false disables it."
				},
				"getAnimDuration": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getLocalBonePosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The bone name."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The position."
						}
					],
					"description": "Return the position of the bone"
				},
				"getWorldBonePosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The bone name."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The position."
						}
					],
					"description": "Return the position of the bone"
				},
				"getContainer": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable."
						},
						{
							"type": [
								"int"
							],
							"name": "index",
							"description": "The index of the container (default: 0)."
						}
					],
					"returns": [
						{
							"type": [
								"container"
							],
							"description": "The container."
						}
					],
					"description": "Returns the container stored in the given index inside the controller"
				},
				"connect": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"disconnect": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addContainer": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"removeContainer": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setParams": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getColorNormal": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getColorHighlight": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaxParentCount": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaxChildCount": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isActive": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setActive": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPower": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPower": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPublicData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPublicData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasOutputType": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShape": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getConnectionInputType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getConnectionOutputType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getBody": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSingleParent": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getParents": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getChildren": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getJoints": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getBearings": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPistons": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPoseWeight": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPoseWeight": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getGlowMultiplier": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setGlowMultiplier": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getUvFrameIndex": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setUvFrameIndex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasAnim": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setAnimProgress": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setAnimEnabled": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAnimDuration": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getLocalBonePosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldBonePosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getContainer": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"connect": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"disconnect": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"connectToJoint": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addContainer": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"removeContainer": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setParams": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasSeat": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSeatCharacter": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSeatCharacter": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSeatInteractables": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"pressSeatInteractable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"releaseSeatInteractable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasSteering": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSteeringFlag": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"unsetSteeringFlag": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSteeringPower": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSteeringAngle": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSteeringJointLeftAngleSpeed": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSteeringJointRightAngleSpeed": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSteeringJointLeftAngleLimit": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSteeringJointRightAngleLimit": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSteeringJointUnlocked": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSteeringJointSettings": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSteeringJointLeftAngleSpeed": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSteeringJointRightAngleSpeed": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSteeringJointLeftAngleLimit": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSteeringJointRightAngleLimit": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSteeringJointUnlocked": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSteeringJointSettings": {
					"args": 7,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSubMeshVisible": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": ""
						},
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.joint": {
			"constants": {},
			"tabledata": {
				"createPart": {
					"args": 6,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": "joint",
							"description": "The parent joint."
						},
						{
							"type": [
								"uuid"
							],
							"name": "uuid",
							"description": "The uuid of the shape."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The shape's local position."
						},
						{
							"type": [
								"vec3"
							],
							"name": "z-axis",
							"description": "The shape's local z direction."
						},
						{
							"type": [
								"vec3"
							],
							"name": "x-axis",
							"description": "The shape's local x direction."
						},
						{
							"type": [
								"bool"
							],
							"name": "forceCreate",
							"description": "Set true to force create the shape."
						}
					],
					"returns": [],
					"description": "Create a part on joint"
				},
				"createBlock": {
					"args": 5,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": "joint",
							"description": "The parent joint."
						},
						{
							"type": [
								"uuid"
							],
							"name": "uuid",
							"description": "The uuid of the shape."
						},
						{
							"type": [
								"vec3"
							],
							"name": "size",
							"description": "The shape's size."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The shape's local position."
						},
						{
							"type": [
								"bool"
							],
							"name": "forceCreate",
							"description": "Set true to force create the shape."
						}
					],
					"returns": [],
					"description": "Create a block on joint"
				},
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": "joint",
							"description": "The joint."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The joint's id."
						}
					],
					"description": "Returns the id of a joint."
				},
				"getType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": "joint",
							"description": "The joint."
						}
					],
					"returns": [
						{
							"type": [
								"string"
							],
							"description": "The joint's type. (sm.joint.types)"
						}
					],
					"description": "Returns the joint type of a joint."
				},
				"getShapeA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": "joint",
							"description": "The joint."
						}
					],
					"returns": [
						{
							"type": [
								"shape"
							],
							"description": "The joint's first shape."
						}
					],
					"description": "Returns the [`shape`](#userdata.shape \"userdata.shape\") a joint is attached to. This shape does always exist."
				},
				"getShapeB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": "joint",
							"description": "The joint."
						}
					],
					"returns": [
						{
							"type": [
								"shape"
							],
							"description": "The joint's second shape."
						}
					],
					"description": "Returns the [`shape`](#userdata.shape \"userdata.shape\") that is attached to a joint on another [`body`](#userdata.body \"userdata.body\"). This method returns nil if there is no shape attached to the joint."
				},
				"getColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": "joint",
							"description": "The joint."
						}
					],
					"returns": [
						{
							"type": [
								"color"
							],
							"description": "The joint's color."
						}
					],
					"description": "Returns the color of a joint."
				},
				"getAngle": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": "bearing",
							"description": "The bearing."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The bearing's angle. The angle ranges between -math.pi and +math.pi."
						}
					],
					"description": "Returns the angle of a bearing."
				},
				"getAngularVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": "bearing",
							"description": "The bearing."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The bearing's angular velocity."
						}
					],
					"description": "Returns the angular velocity of a bearing.\n\nThe angular velocity can be set using [`setMotorVelocity`](#sm.joint.setmotorvelocity \"sm.joint.setmotorvelocity\") or [`setTargetAngle`](#sm.joint.settargetangle \"sm.joint.settargetangle\")."
				},
				"getAppliedImpulse": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": "bearing",
							"description": "The bearing."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The bearing's applied impulse."
						}
					],
					"description": "Returns the applied impulse of a bearing.\n\nThe applied impulse can be set using [`setMotorVelocity`](#sm.joint.setmotorvelocity \"sm.joint.setmotorvelocity\") or [`setTargetAngle`](#sm.joint.settargetangle \"sm.joint.settargetangle\")."
				},
				"isReversed": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": "bearing",
							"description": "The bearing."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Whether the bearing is reversed (rotating counterclockwise)."
						}
					],
					"description": "Returns whether a bearing has been reversed using the _Connect Tool_. A reversed bearing rotates counterclockwise."
				},
				"setMotorVelocity": {
					"args": 3,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": "bearing",
							"description": "The bearing."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "targetVelocity",
							"description": "The target velocity."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "maxImpulse",
							"description": "The max impulse."
						}
					],
					"returns": [],
					"description": "Sets the motor velocity for a bearing. The bearing will try to maintain the target velocity with the given amount of impulse/strength.\n\nIn Scrap Mechanic, the Gas Engine increases both velocity and impulse with every gear. The Electic Engine increases velocity, but maintains the same impulse for every gear, making it sturdier.\n\nThis method cancels the effects of [`setTargetAngle`](#sm.joint.settargetangle \"sm.joint.settargetangle\")."
				},
				"setTargetAngle": {
					"args": 4,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": "bearing",
							"description": "The bearing."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "targetAngle",
							"description": "The target angle."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "targetVelocity",
							"description": "The target velocity."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "maxImpulse",
							"description": "The max impulse."
						}
					],
					"returns": [],
					"description": "Sets the target angle for a bearing. The bearing will try to reach the target angle with the target velocity and the given amount of impulse/strength.\n\nThe target angle is set to range between `-math.pi` and `+math.pi`. The bearing will always try to rotate in the direction closest to the target angle.\n\nThis method cancels the effects of [`setMotorVelocity`](#sm.joint.setmotorvelocity \"sm.joint.setmotorvelocity\")."
				},
				"getLength": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"piston",
								"joint"
							],
							"name": "piston",
							"description": "The piston."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The piston's current length in blocks."
						}
					],
					"description": "Returns the current length of a piston. The length is measured in blocks."
				},
				"setTargetLength": {
					"args": 4,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"piston",
								"joint"
							],
							"name": "bearing",
							"description": "The bearing."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "targetLength",
							"description": "The target length."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "targetVelocity",
							"description": "The target velocity."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "maxImpulse",
							"description": "The max impulse. (Defaults to impulse used in game)"
						}
					],
					"returns": [],
					"description": "Sets the target length for a piston. The piston will try to reach the target length with the target velocity and the given amount of impulse/strength.\n\nThe target length is measured in blocks.\n\nThis method cancels the effects of [`setMotorVelocity`](#sm.joint.setmotorvelocity \"sm.joint.setmotorvelocity\")."
				}
			},
			"userdata": {
				"createPart": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createBlock": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShapeB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAngle": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAngularVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAppliedImpulse": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isReversed": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMotorVelocity": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setTargetAngle": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"bearing",
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getLength": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"piston",
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setTargetLength": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"piston",
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"joint"
							],
							"name": ""
						},
						{
							"type": [
								"joint"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.container": {
			"constants": {},
			"tabledata": {
				"beginTransaction": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Whether starting a transaction was successful."
						}
					],
					"description": "Starts a new _transaction_ shared across all containers. A transaction is a collection of all changes of container items will be collected and processed\n\nA transaction must be ended with [`sm.container.endTransaction`](#sm.container.endtransaction \"sm.container.endtransaction\")."
				},
				"endTransaction": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Whether ending a transaction was successful."
						}
					],
					"description": "Ends a transaction."
				},
				"abortTransaction": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [],
					"returns": [],
					"description": "Aborts a transaction."
				},
				"getSize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": "container",
							"description": "The container."
						}
					],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The size."
						}
					],
					"description": "Returns the number of slots in a container."
				},
				"getMaxStackSize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setItem": {
					"args": 5,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"container"
							],
							"name": "container",
							"description": "The container."
						},
						{
							"type": [
								"int"
							],
							"name": "slot",
							"description": "The slot."
						},
						{
							"type": [
								"uuid"
							],
							"name": "itemUuid",
							"description": "The uuid of the item."
						},
						{
							"type": [
								"int"
							],
							"name": "quantity",
							"description": "The number of items."
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Indicates if the action is possible."
						}
					],
					"description": "Sets the number of items stacked in a given container slot."
				},
				"getItem": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"container"
							],
							"name": "container",
							"description": "The container."
						},
						{
							"type": [
								"int"
							],
							"name": "slot",
							"description": "The slot."
						}
					],
					"returns": [
						{
							"type": [
								"table {uuid, int, (int)}"
							],
							"description": "The table."
						}
					],
					"description": "Returns a table containing item uuid, quantity (and instance id for tools) at given slot."
				},
				"getFirstItem": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasChanged": {
					"args": 2,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"container"
							],
							"name": "container",
							"description": "The container."
						},
						{
							"type": [
								"unsigned"
							],
							"name": "tick",
							"description": "The tick."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Returns true if the container has been changed."
						}
					],
					"description": "Returns true if the given tick is lower than the tick the container was last changed."
				},
				"isEmpty": {
					"args": 1,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"container"
							],
							"name": "container",
							"description": "The container."
						}
					],
					"returns": [
						{
							"type": [
								"bool"
							],
							"description": "Returns true if the container is empty."
						}
					],
					"description": "Returns true if the container is empty."
				},
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"quantity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"totalQuantity": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"itemUuid": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"swap": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"spendFromSlot": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"spend": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"collectToSlot": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"collect": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"canCollect": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"canSpend": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"moveAll": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setFilters": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getSize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaxStackSize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setItem": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getItem": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasChanged": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isEmpty": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setAllowCollect": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAllowCollect": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setAllowSpend": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAllowSpend": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"canCollect": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"canSpend": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setFilters": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"container"
							],
							"name": ""
						},
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.quest": {
			"constants": {},
			"tabledata": {
				"addQuest": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getQuest": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getQuestById": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getActiveQuests": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"removeQuest": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"completeQuest": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getIsRepeatable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getHasCompleted": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getUuid": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getObjectives": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRewards": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getDescription": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"remove": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"complete": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quest"
							],
							"name": ""
						},
						{
							"type": [
								"quest"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.harvestable": {
			"constants": {},
			"tabledata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getName": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterial": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterialId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"create": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRotation": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPoseWeight": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPoseWeight": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setColor": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getUvFrameIndex": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setUvFrameIndex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setParams": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPublicData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPublicData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getClientPublicData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setClientPublicData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getName": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterial": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterialId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRotation": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setRotation": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPoseWeight": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPoseWeight": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setColor": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getUvFrameIndex": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setUvFrameIndex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setParams": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getUuid": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAabb": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPublicData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPublicData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getClientPublicData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setClientPublicData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"harvestable"
							],
							"name": ""
						},
						{
							"type": [
								"harvestable"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.character": {
			"constants": {},
			"tabledata": {
				"createCharacter": {
					"args": 6,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"player"
							],
							"name": "player",
							"description": "The player controlling the character."
						},
						{
							"type": [
								"world"
							],
							"name": "world",
							"description": "The world the character is created in."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The world position of the character."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "character",
							"description": "The old character to inherit from (Optional)."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"character"
							],
							"description": "The created character."
						}
					],
					"description": "Creates a new character in a world."
				},
				"preloadRenderables": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getDirection": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMass": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getHeight": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPlayer": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getUnit": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorld": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isPlayer": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRadius": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isDefaultColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setColor": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getColor": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getGlowMultiplier": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setGlowMultiplier": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"bindAnimationCallback": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"removeAnimationCallbacks": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addRenderable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"removeRenderable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAnimationInfo": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"updateAnimation": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMovementWeights": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setAllowTumbleAnimations": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setDowned": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isDowned": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSwimming": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isSwimming": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setDiving": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isDiving": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setTumbling": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isTumbling": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"applyTumblingImpulse": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTumblingWorldPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTumblingWorldRotation": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTumblingExtent": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTumblingLinearVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCanSwim": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getActiveAnimations": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTpBonePos": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTpBoneRot": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMovementEffects": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMovementSpeedFraction": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMovementSpeedFraction": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setLockingInteractable": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"interactable"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getLockingInteractable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCurrentMovementNoiseRadius": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isSprinting": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isAiming": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isCrouching": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCurrentMovementSpeed": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isOnGround": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCharacterType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.player": {
			"constants": {},
			"tabledata": {
				"getAllPlayers": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": [
						{
							"type": [
								"table {player}"
							],
							"description": "The table of players in the game."
						}
					],
					"description": "Returns a table of all [`players`](#userdata.player \"userdata.player\") that are currently in the game."
				},
				"placeLift": {
					"args": 5,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"player"
							],
							"name": "player",
							"description": "The player to own the lift."
						},
						{
							"type": [
								"table"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The lift position."
						},
						{
							"type": [
								"int"
							],
							"name": "level",
							"description": "The lift level."
						},
						{
							"type": [
								"int"
							],
							"name": "rotation",
							"description": "The rotation of the creation on the lift."
						}
					],
					"returns": [],
					"description": "Place down a lift game object"
				},
				"removeLift": {
					"args": -1,
					"sandbox": "serverMethod",
					"params": [
						{
							"type": [
								"player"
							],
							"name": "player",
							"description": "The player that owns the lift."
						}
					],
					"returns": [],
					"description": "Remove the player's lift, if the lift exists."
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"player"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCharacter": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setCharacter": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"character"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getName": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getInventory": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getHotbar": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"placeLift": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"removeLift": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"sendCharacterEvent": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isMale": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getCarryColor": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getCarry": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"player"
							],
							"name": ""
						},
						{
							"type": [
								"player"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.unit": {
			"constants": {},
			"tabledata": {
				"createUnit": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAllUnits": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				}
			},
			"userdata": {
				"destroy": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unit"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setWhiskerData": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setHearingData": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createState": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMovementDirection": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setFacingDirection": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMovementType": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setWantsJump": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCurrentMovementDirection": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getCurrentFacingDirection": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"sendCharacterEvent": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCharacter": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unit"
							],
							"name": ""
						},
						{
							"type": [
								"unit"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.aiState": {
			"constants": {},
			"tabledata": {},
			"userdata": {
				"start": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"stop": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"onFixedUpdate": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"onUnitUpdate": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isDone": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMovementDirection": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getFacingDirection": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMovementType": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWantsJump": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"aistate"
							],
							"name": ""
						},
						{
							"type": [
								"aistate"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__gc": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				}
			}
		},
		"sm.areaTrigger": {
			"constants": {},
			"tabledata": {
				"createBox": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "dimension",
							"description": "The dimensions of the box."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The world position."
						},
						{
							"type": [
								"quat"
							],
							"name": "rotation",
							"description": "The world rotation."
						},
						{
							"type": [
								"int"
							],
							"name": "filter",
							"description": "The object types the area trigger may detect. (See sm.areaTrigger.filter)"
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"areaTrigger"
							],
							"description": "The created area trigger."
						}
					],
					"description": "Creates a new box area trigger at a given position with a given size.\n\nIf a filter is specified, the trigger area will only be able to detects objects of that certain type. See [`sm.areaTrigger.filter`](#sm.areatrigger.filter \"sm.areatrigger.filter\") for more information about filters."
				},
				"createBoxWater": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createAttachedBox": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"interactable"
							],
							"name": "interactable",
							"description": "The host interactable"
						},
						{
							"type": [
								"vec3"
							],
							"name": "dimension",
							"description": "The size of the box"
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The position offset"
						},
						{
							"type": [
								"quat"
							],
							"name": "rotation",
							"description": "The rotation offset"
						},
						{
							"type": [
								"int"
							],
							"name": "filter",
							"description": "The object types the area trigger may detect. (See sm.areaTrigger.filter)"
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"areaTrigger"
							],
							"description": "The created area trigger."
						}
					],
					"description": "Creates an area trigger box with a given size that stays attached to an [`interactable`](#sm.interactable \"sm.interactable\")\n\nIf a filter is specified, the trigger area will only be able to detects objects of that certain type. See [`sm.areaTrigger.filter`](#sm.areatrigger.filter \"sm.areatrigger.filter\") for more information about filters."
				},
				"destroy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areaTrigger"
							],
							"name": "areaTrigger",
							"description": "The area trigger to be destroyed."
						}
					],
					"returns": [],
					"description": "Destroys an area trigger."
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"bindOnEnter": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"bindOnExit": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"bindOnStay": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"bindOnProjectile": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getContents": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldMin": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldMax": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setWorldPosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSize": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getHostInteractable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getUserData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						},
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__gc": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"areatrigger"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.portal": {
			"constants": {},
			"tabledata": {
				"createPortal": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addWorldPortalHook": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"world"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"popWorldPortalHook": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasOpeningA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hasOpeningB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setOpeningA": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setOpeningB": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPositionA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPositionB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRotationA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRotationB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getContentsA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getContentsB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"transferAToB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"transferBToA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"portal"
							],
							"name": ""
						},
						{
							"type": [
								"portal"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.lift": {
			"constants": {},
			"tabledata": {},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"lift"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getWorldPosition": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getLevel": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"hasBodies": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"lift"
							],
							"name": ""
						},
						{
							"type": [
								"lift"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.vec3": {
			"constants": {},
			"tabledata": {
				"new": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The X value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "y",
							"description": "The Y value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "z",
							"description": "The Z value."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The created vector."
						}
					],
					"description": "Creates a new vector."
				},
				"zero": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The zero vector."
						}
					],
					"description": "Creates a new vector with 0 in x, y, x."
				},
				"one": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The one vector."
						}
					],
					"description": "Creates a new vector with 1 in x, y, x."
				},
				"getX": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The X value."
						}
					],
					"description": "Returns the X value of a vector."
				},
				"setX": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The X value."
						}
					],
					"returns": [],
					"description": "Sets the X value of a vector."
				},
				"getY": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The Y value."
						}
					],
					"description": "Returns the Y value of a vector."
				},
				"setY": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "y",
							"description": "The Y value."
						}
					],
					"returns": [],
					"description": "Sets the Y value of a vector."
				},
				"getZ": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The Z value."
						}
					],
					"description": "Returns the Z value of a vector."
				},
				"setZ": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "z",
							"description": "The Z value."
						}
					],
					"returns": [],
					"description": "Sets the Z value of a vector."
				},
				"normalize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The normalized vector."
						}
					],
					"description": "Normalizes a vector, ie. converts to a unit vector of length 1."
				},
				"dot": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector1",
							"description": "The first vector."
						},
						{
							"type": [
								"vec3"
							],
							"name": "vector2",
							"description": "The second vector."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The dot product."
						}
					],
					"description": "Returns the [dot product](https://en.wikipedia.org/wiki/Dot_product) of a vector."
				},
				"cross": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector1",
							"description": "The first vector."
						},
						{
							"type": [
								"vec3"
							],
							"name": "vector2",
							"description": "The second vector."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The cross product."
						}
					],
					"description": "Returns the [cross product](https://en.wikipedia.org/wiki/Cross_product) of two vectors."
				},
				"length": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The length of the vector."
						}
					],
					"description": "Returns the distance of the vector.\n\nIf you want the squared length, using [`length2`](#sm.vec3.length2 \"sm.vec3.length2\") is faster than squaring the result of this function."
				},
				"length2": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The squared length of the vector."
						}
					],
					"description": "Returns the squared distance of the vector."
				},
				"lerp": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector1",
							"description": "The first vector."
						},
						{
							"type": [
								"vec3"
							],
							"name": "vector2",
							"description": "The second vector."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "t",
							"description": "Interpolation amount between the two inputs."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "out"
						}
					],
					"description": "Performs a [linear interpolation](https://en.wikipedia.org/wiki/Linear_interpolation) between two vectors."
				},
				"bezier2": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"bezier3": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"rotateX": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "angle",
							"description": "The angle."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The rotated vector."
						}
					],
					"description": "Rotate a vector around the X axis."
				},
				"rotateY": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "angle",
							"description": "The angle."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The rotated vector."
						}
					],
					"description": "Rotate a vector around the Y axis."
				},
				"rotateZ": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "angle",
							"description": "The angle."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The rotated vector."
						}
					],
					"description": "Rotate a vector around the Z axis."
				},
				"rotate": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "angle",
							"description": "The angle."
						},
						{
							"type": [
								"vec3"
							],
							"name": "normal",
							"description": "The axis to be rotated around."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The rotated vector."
						}
					],
					"description": "Rotate a vector around an axis."
				},
				"getRotation": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector1",
							"description": "The first vector."
						},
						{
							"type": [
								"vec3"
							],
							"name": "vector2",
							"description": "The second vector."
						}
					],
					"returns": [
						{
							"type": [
								"quat"
							],
							"description": "The transformation."
						}
					],
					"description": "Returns a [`quaternion`](#userdata.quat \"userdata.quat\") representing the rotation from one vector to another.\n\nThe quaternion can then be multiplied with any vector to rotate it in the same fashion.\n\nv1 \\= sm.vec3.new(1,0,0)\nv2 \\= sm.vec3.new(0,1,0)\n\ntrans \\= sm.vec3.getRotation(v1, v2)\n\\-- \\`trans\\` now rotates a vector 90 degrees\n\nprint(trans \\* v2)\n\\-- {<Vec3>, x = -1, y = 0, z = 0}"
				},
				"closestAxis": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "vector",
							"description": "The vector."
						}
					],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The axis-aligned vector."
						}
					],
					"description": "Finds the closest axis-aligned vector from the given vector"
				}
			},
			"userdata": {
				"normalize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"dot": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"cross": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"length": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"length2": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"rotateX": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"rotateY": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"rotateZ": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"rotate": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__unm": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__add": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__sub": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__div": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3",
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__mul": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3",
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__lt": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__tostring": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.quat": {
			"constants": {},
			"tabledata": {
				"new": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The X value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "y",
							"description": "The Y value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "z",
							"description": "The Z value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "w",
							"description": "The W value."
						}
					],
					"returns": [
						{
							"type": [
								"quat"
							],
							"description": "The created quaternion."
						}
					],
					"description": "Creates a new quaternion."
				},
				"identity": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": [
						{
							"type": [
								"quat"
							],
							"description": "The created quaternion."
						}
					],
					"description": "Creates a new identity quaternion."
				},
				"angleAxis": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getX": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The X value."
						}
					],
					"description": "Returns the X value of a quaternion."
				},
				"setX": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "x",
							"description": "The X value."
						}
					],
					"returns": [],
					"description": "Sets the X value of a quaternion."
				},
				"getY": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The Y value."
						}
					],
					"description": "Returns the Y value of a quaternion."
				},
				"setY": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "y",
							"description": "The Y value."
						}
					],
					"returns": [],
					"description": "Sets the Y value of a quaternion."
				},
				"getZ": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The Z value."
						}
					],
					"description": "Returns the Z value of a quaternion."
				},
				"setZ": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "z",
							"description": "The Z value."
						}
					],
					"returns": [],
					"description": "Sets the Z value of a quaternion."
				},
				"getW": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The W value."
						}
					],
					"description": "Returns the W value of a quaternion."
				},
				"setW": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "w",
							"description": "The W value."
						}
					],
					"returns": [],
					"description": "Sets the W value of a quaternion."
				},
				"round90": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion",
							"description": "The quaternion."
						}
					],
					"returns": [
						{
							"type": [
								"quat"
							],
							"description": "quaternion\tThe rounded quaternion."
						}
					],
					"description": "Rounds the quaternion rotation into 90 degree steps"
				},
				"lookRotation": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "at",
							"description": "The forward vector."
						},
						{
							"type": [
								"vec3"
							],
							"name": "up",
							"description": "The up vector."
						}
					],
					"returns": [
						{
							"type": [
								"quat"
							],
							"description": "quaternion\tThe quaternion."
						}
					],
					"description": "Create a new quaternion from direction vectors"
				},
				"slerp": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": "quaternion1",
							"description": "The first quaternion."
						},
						{
							"type": [
								"quat"
							],
							"name": "quaternion2",
							"description": "The second quaternion."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "t",
							"description": "Interpolation amount between the two inputs."
						}
					],
					"returns": [
						{
							"type": [
								"quat"
							],
							"description": "out"
						}
					],
					"description": "Performs a spherical linear interpolation between two quaternion."
				}
			},
			"userdata": {
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__mul": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": ""
						},
						{
							"type": [
								"quat",
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"quat"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.uuid": {
			"constants": {},
			"tabledata": {
				"new": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": "uuid",
							"description": "The string to generate an uuid instance from. If none is provided, generate a random uuid."
						}
					],
					"returns": [
						{
							"type": [
								"uuid"
							],
							"description": "The created uuid."
						}
					],
					"description": "Generates a uuid."
				},
				"getNil": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": [
						{
							"type": [
								"uuid"
							],
							"description": "The nil uuid."
						}
					],
					"description": "Creates a nil uuid {00000000-0000-0000-0000-000000000000}"
				}
			},
			"userdata": {
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__tostring": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.color": {
			"constants": {},
			"tabledata": {
				"new": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer",
								"string",
								"number"
							],
							"name": "hexInt",
							"description": "The hex value."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": [
						{
							"type": [
								"color"
							],
							"description": "The created color."
						}
					],
					"description": "Creates a new color object from a hex value `0xRRBBGGAA`."
				},
				"getR": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color object."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The red value."
						}
					],
					"description": "Returns the red value of a color."
				},
				"getG": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color object."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The green value."
						}
					],
					"description": "Returns the green value of a color."
				},
				"getB": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color object."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The blue value."
						}
					],
					"description": "Returns the blue value of a color."
				},
				"getA": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color object."
						}
					],
					"returns": [
						{
							"type": [
								"number"
							],
							"description": "The alpha value."
						}
					],
					"description": "Returns the alpha value of a color."
				},
				"setR": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color object."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "r",
							"description": "The red value."
						}
					],
					"returns": [],
					"description": "Sets the red value of a color."
				},
				"setG": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color object."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "g",
							"description": "The green value."
						}
					],
					"returns": [],
					"description": "Sets the green value of a color."
				},
				"setB": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color object."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "b",
							"description": "The blue value."
						}
					],
					"returns": [],
					"description": "Sets the blue value of a color."
				},
				"setA": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The color object."
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": "a",
							"description": "The alpha value."
						}
					],
					"returns": [],
					"description": "Sets the alpha value of a color."
				}
			},
			"userdata": {
				"getHexStr": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__add": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__sub": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__div": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": ""
						},
						{
							"type": [
								"color",
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__mul": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": ""
						},
						{
							"type": [
								"color",
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__tostring": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.raycastResult": {
			"constants": {},
			"tabledata": {},
			"userdata": {
				"getBody": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"raycastresult"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getShape": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"raycastresult"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCharacter": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"raycastresult"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getJoint": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"raycastresult"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getLiftData": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"raycastresult"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getHarvestable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"raycastresult"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAreaTrigger": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"raycastresult"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.pathNode": {
			"constants": {},
			"tabledata": {
				"createPathNode": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"destroy": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"connect": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"pathnode"
							],
							"name": ""
						},
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPosition": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"pathnode"
							],
							"name": ""
						},
						{
							"type": [
								"pathnode"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.pathfinder": {
			"constants": {},
			"tabledata": {
				"getPath": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSortedNodes": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.gui": {
			"constants": {},
			"tabledata": {
				"createWidget": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getScreenSize": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"createGuiFromLayout": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createContainerGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createWorkbenchGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createCookBotGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createCraftBotGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createMechanicStationGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createSurvivalHudGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createHideoutGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createDressBotGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createEngineGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createSeatGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createNameTagGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createBagIconGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createBeaconIconGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createWaypointIconGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createAmmunitionContainerGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createBatteryContainerGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createChemicalContainerGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createFertilizerContainerGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createGasContainerGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createSeedContainerGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createWaterContainerGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createSeatUpgradeGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createSteeringBearingGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"startFadeToBlack": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"endFadeToBlack": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createChallengeHUDGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createChallengeMessageGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createLogbookGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"displayAlertText": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"hideGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getKeyBinding": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setInteractionText": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setCenterIcon": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setProgressFraction": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createCharacterCustomizationGui": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setCharacterDebugText": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"character"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"exitToMenu": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"chatMessage": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.gui.widget": {
			"constants": {},
			"tabledata": {
				"getId": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getName": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getTypeName": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getPosition": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setPosition": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getVisible": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setVisible": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getSize": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setSize": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getText": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setText": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"destroy": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"find": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"bindOnClick": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				}
			},
			"userdata": {
				"find": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getName": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getTypeName": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getPosition": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setPosition": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getVisible": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setVisible": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getSize": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setSize": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getText": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setText": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"bindOnClick": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"widget"
							],
							"name": ""
						},
						{
							"type": [
								"widget"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.gui.interface": {
			"constants": {},
			"tabledata": {},
			"userdata": {
				"destroy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"open": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"close": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isActive": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setText": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setVisible": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setColor": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setImage": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setItemIcon": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setIconImage": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setButtonState": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSliderRange": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSliderPosition": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSliderRangeLimit": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSliderData": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"clearList": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addListItem": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSelectedListItem": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"clearGrid": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addGridItemsFromFile": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addGridItem": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setGridItem": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setGridSize": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setContainer": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"container"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setContainers": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setData": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setHost": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"character",
								"shape"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setWorldPosition": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"world"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMaxRenderDistance": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setFadeRange": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setRequireLineOfSight": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setOnCloseCallback": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setButtonCallback": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setSliderCallback": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setGridButtonCallback": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setGridItemChangedCallback": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setListSelectionCallback": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						},
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__gc": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"guiinterface"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.particle": {
			"constants": {},
			"tabledata": {
				"createParticle": {
					"args": 4,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"string"
							],
							"name": "particle",
							"description": "The particle name."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The position."
						},
						{
							"type": [
								"quat"
							],
							"name": "rotation",
							"description": "The rotation. (Defaults to no rotation)"
						},
						{
							"type": [
								"color"
							],
							"name": "color",
							"description": "The blend color. (Defaults to white)"
						}
					],
					"returns": [],
					"description": "Create a particle effect at a given position and rotation.\n\nNote\n\nIf you start a looping particle effect through this method then the only way to get rid of it is by reloading the save."
				}
			},
			"userdata": {}
		},
		"sm.effect": {
			"constants": {},
			"tabledata": {
				"playEffect": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The name."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The position."
						},
						{
							"type": [
								"vec3"
							],
							"name": "velocity",
							"description": "The velocity. (Defaults to no velocity)"
						},
						{
							"type": [
								"quat"
							],
							"name": "rotation",
							"description": "The rotation. (Defaults to no rotation)"
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": [],
					"description": "Plays an effect. If this function is called on the server it will play the effect on all clients.\n\nNote\n\nIf you start a looping effect using this function you will not be able to stop it.  \nPlease use [`createEffect`](#sm.effect.createeffect \"sm.effect.createeffect\") for looping effects"
				},
				"playHostedEffect": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createEffect": {
					"args": 3,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The name."
						},
						{
							"type": [
								"character",
								"interactable"
							],
							"name": "interactable",
							"description": "The interactable the effect is attached to. (Optional)"
						},
						{
							"type": [
								"string"
							],
							"name": "name",
							"description": "The bone name. (Optional)"
						}
					],
					"returns": [
						{
							"type": [
								"effect"
							],
							"description": "The created effect."
						}
					],
					"description": "Creates an effect.\n\nIf you provide a host interactable to the effect then it will fetch position, velocity and orientation data from the interactable instead of relying on this information being fed to it.\n\nThis results in far more accurate positioning of effects that are supposed to stay attached to an object."
				},
				"createEffect2D": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"start": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"stop": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"stopImmediate": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isPlaying": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setPosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setScale": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setVelocity": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setRotation": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setOffsetPosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setOffsetRotation": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						},
						{
							"type": [
								"quat"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setParameter": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string",
								"vec3",
								"quat",
								"color",
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						},
						{
							"type": [
								"effect"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__gc": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"effect"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.audio": {
			"constants": {},
			"tabledata": {
				"play": {
					"args": 2,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"string"
							],
							"name": "sound",
							"description": "The sound to play."
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The world position of the sound. (Optional)"
						}
					],
					"returns": [],
					"description": "Plays a sound.\n\nIf position is specified, the sound will play at the given coordinates in the world. Otherwise, the sound will play normally.\n\nFor a list of available sounds to play, see [`sm.audio.soundList`](#sm.audio.soundlist \"sm.audio.soundlist\")."
				}
			},
			"userdata": {}
		},
		"sm.localPlayer": {
			"constants": {},
			"tabledata": {
				"getPlayer": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"player"
							],
							"description": "The player object."
						}
					],
					"description": "Returns the player object of the local player."
				},
				"getId": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"int"
							],
							"description": "The player's id."
						}
					],
					"description": "Returns the unique player id of the local player."
				},
				"getPosition": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The player's world position."
						}
					],
					"description": "Returns the world postition of the local player."
				},
				"getDirection": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The direction of the player's aim."
						}
					],
					"description": "Returns the direction the local player is aiming."
				},
				"getRight": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The right-vector of the player's aim."
						}
					],
					"description": "Returns the right-vector perpendicular to the local player's aim."
				},
				"getUp": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The up-vector of the player's aim."
						}
					],
					"description": "Returns the up-vector perpendicular to the local player's aim."
				},
				"getRaycastStart": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The start position of the raycast."
						}
					],
					"description": "Returns the start position of the local player's raycast. The position depends on the [`camera`](#sm.camera \"sm.camera\")'s position, and whether it's in first- of third-person."
				},
				"getRaycast": {
					"args": 3,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "range",
							"description": "The maximum range."
						},
						{
							"type": [
								"vec3"
							],
							"name": "origin",
							"description": "The start position. (Defaults to getRaycastStart)"
						},
						{
							"type": [
								"vec3"
							],
							"name": "direction",
							"description": "The direction. (Defaults to getDirection)"
						}
					],
					"returns": [
						{
							"type": [
								"table {bool, raycastResult}"
							],
							"description": "2 values: whether raycast was successful; the raycast result data."
						}
					],
					"description": "Performs a [raycast](https://en.wikipedia.org/wiki/Ray_casting) relative to the local player's perspective."
				},
				"isInFirstPersonView": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getFpBonePos": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getActiveItem": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getSelectedHotbarSlot": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getCarryColor": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getCarry": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getInventory": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getHotbar": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setDirection": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getFpAnimationInfo": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"updateFpAnimation": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"addRenderable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"removeRenderable": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setBlockSprinting": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setLockedControls": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.camera": {
			"constants": {},
			"tabledata": {
				"setPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPosition": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The camera's world position."
						}
					],
					"description": "Returns the world postition of the camera."
				},
				"getDefaultPosition": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setDirection": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getDirection": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The direction of the camera's aim."
						}
					],
					"description": "Returns the direction the camera is aiming."
				},
				"getUp": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The up-vector of the camera's aim."
						}
					],
					"description": "Returns the up-vector perpendicular to the camera's aim."
				},
				"getRight": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The right-vector of the camera's aim."
						}
					],
					"description": "Returns the right-vector perpendicular to the camera's aim."
				},
				"getFov": {
					"args": -1,
					"sandbox": "clientMethod",
					"params": [],
					"returns": [
						{
							"type": [
								"vec3"
							],
							"description": "The field of view."
						}
					],
					"description": "Returns the camera's field of view angle."
				},
				"setShake": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": "strength",
							"description": "The camera shake strength."
						}
					],
					"returns": [],
					"description": "Sets the camera's level of camera shake."
				},
				"setCameraState": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCameraState": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"setCameraPullback": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"cameraSphereCast": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.render": {
			"constants": {},
			"tabledata": {
				"setOutdoorLighting": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getOutdoorLighting": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				},
				"getScreenCoordinatesFromWorldPosition": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.tool": {
			"constants": {},
			"tabledata": {
				"checkLiftCollision": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "The lift position."
						},
						{
							"type": [
								"int"
							],
							"name": "rotation",
							"description": "The rotation of the creation on the lift."
						}
					],
					"returns": [],
					"description": "Used to check collisions between the lift and the world."
				},
				"preloadRenderables": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": [],
					"description": "Pre-loads renderable data to be used by the tool. This eliminates excessive loading during run time."
				},
				"forceTool": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"uuidExists": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"uuid"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"getId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getOwner": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"updateAnimation": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMovementAnimation": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"updateMovementAnimation": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAnimationInfo": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"updateJoint": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"updateCamera": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setTpRenderables": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setTpColor": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"updateFpAnimation": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getFpAnimationInfo": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setFpRenderables": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setFpColor": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"color"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"updateFpCamera": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isCrouching": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isSprinting": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isOnGround": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setBlockSprint": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setMovementSlowDown": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isLocal": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isInFirstPersonView": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"isEquipped": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setDispersionFraction": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setCrossHairAlpha": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"number",
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"setInteractionTextSuppressed": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPosition": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getDirection": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMovementVelocity": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getRelativeMoveDirection": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMovementSpeedFraction": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCameraWeights": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTpBonePos": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTpBoneDir": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getFpBonePos": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"tool"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			}
		},
		"sm.visualization": {
			"constants": {},
			"tabledata": {
				"setCreationBodies": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"table"
							],
							"name": ""
						}
					],
					"returns": [],
					"description": "Sets an array of bodies to visualize."
				},
				"setCreationVisible": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"bool"
							],
							"name": "visible",
							"description": "Wheter the creation visualization is visible"
						}
					],
					"returns": [],
					"description": "Controls the visibility of the creation visualization"
				},
				"setCreationValid": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"bool"
							],
							"name": "valid",
							"description": "Wheter the visualization should render as valid"
						}
					],
					"returns": [],
					"description": "Controls the rendering of the creation visualization. "
				},
				"setCreationFreePlacement": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"bool"
							],
							"name": "valid",
							"description": "Wheter the visualization should use free placement"
						}
					],
					"returns": [],
					"description": "Controls the transform of the visualization. If true the visualization will render using setFreePlacementPosition/setFreePlacementRotation functions.\n\nIf false the visualization will render ontop of the creation."
				},
				"setCreationFreePlacementPosition": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "World position of the visualization"
						}
					],
					"returns": [],
					"description": "Set the world position of the visualization. Only works if setFreePlacement is true."
				},
				"setCreationFreePlacementRotation": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"int"
							],
							"name": "index",
							"description": "Index to rotate the visualization with"
						}
					],
					"returns": [],
					"description": "Set the rotation index of the visualization. Only works if setFreePlacement is true."
				},
				"setLiftPosition": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": "position",
							"description": "World position of the lift visualization"
						}
					],
					"returns": [],
					"description": "Set the world position of the lift visualization."
				},
				"setLiftLevel": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"int"
							],
							"name": "level",
							"description": "The level of the lift"
						}
					],
					"returns": [],
					"description": "Set the lift level of the lift visualization."
				},
				"setLiftVisible": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"bool"
							],
							"name": "visible",
							"description": "Whether the lift visualization is visible"
						}
					],
					"returns": [],
					"description": "Controls the visibility of the lift visualization"
				},
				"setLiftValid": {
					"args": 1,
					"sandbox": "clientMethod",
					"params": [
						{
							"type": [
								"bool"
							],
							"name": "valid",
							"description": "Whether the visualization should render as valid"
						}
					],
					"returns": [],
					"description": "Controls the rendering of the lift visualization. "
				},
				"setBlockVisualization": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"vec3"
							],
							"name": ""
						},
						{
							"type": [
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"joint",
								"shape"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"createBlueprint": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {
				"setPosition": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"blueprint"
							],
							"name": ""
						},
						{
							"type": [
								"vec3"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"destroy": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"blueprint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__newindex": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__index": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"unknown"
							],
							"name": ""
						},
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__eq": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"blueprint"
							],
							"name": ""
						},
						{
							"type": [
								"blueprint"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"__gc": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				}
			}
		},
		"sm.terrainTile": {
			"constants": {},
			"tabledata": {
				"getHeightAt": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getColorAt": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getMaterialAt": {
					"args": 6,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getClutterIdxAt": {
					"args": 5,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getAssetsForCell": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getHarvestablesForCell": {
					"args": 4,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCreationsForCell": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getNodesForCell": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getPrefabsForCell": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getDecalsForCell": {
					"args": 3,
					"sandbox": "",
					"params": [
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						},
						{
							"type": [
								"integer"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getSize": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getTileUuid": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getCreatorId": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"string"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"getContentFromPrefab": {
					"args": -1,
					"sandbox": "",
					"params": [],
					"returns": []
				}
			},
			"userdata": {}
		},
		"sm.terrainGeneration": {
			"constants": {},
			"tabledata": {
				"saveGameStorage": {
					"args": 2,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						},
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				},
				"loadGameStorage": {
					"args": 1,
					"sandbox": "",
					"params": [
						{
							"type": [
								"table",
								"string",
								"number"
							],
							"name": ""
						}
					],
					"returns": []
				}
			},
			"userdata": {}
		}
	}
}